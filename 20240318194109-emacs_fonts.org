:PROPERTIES:
:ID:       bbd3ed50-ad5f-4644-9722-d4d42d251ed2
:END:
#+title: Emacs fonts
#+filetags: :setting:config:XLFD:font:emacs:

Example of using =set-face-font= with string for XLFD:
#+BEGIN_EXAMPLE
"-unknown-DejaVuSansM Nerd Font-normal-normal-normal-mono-13-*-*-*-p-*-iso10646-1"
#+END_EXAMPLE

When you set a font in Emacs using =set-face-font=, especially with a detailed
font specification string, you're using what's known as an X Logical Font
Description (XLFD). XLFDs are a way to specify fonts in X Window System
environments, and they're quite detailed, allowing you to specify various
attributes of a font.

*This breaks down into the following elements*:
1. Foundry (~unknown~): The creator or distributor of the font.
2. Family (~DejaVuSansM Nerd Font~): The font family name, which can include
   spaces.
3. Weight (~normal~): The weight of the font (e.g., ~bold~, ~normal~).
4. Slant (~normal~): The slant of the font (e.g., ~italic~, ~oblique~,
   ~normal~).
5. Setwidth (~normal~): The relative width of the characters (e.g., ~normal~,
   ~condensed~, ~expanded~).
6. Add Style (~normal~): Additional style information (often not used, thus
   ~normal~).
7. Pixels (~mono~): The pixel size of the font. Here, it seems to be a
   misplacement, as ~mono~ would usually indicate monospace (which belongs to a
   different field, "Spacing") and the pixel size should be a numeric value.
8. Point Size (~13~): The point size of the font multiplied by 10. Here, ~13~
   means a 13-point font.
9. Resolution X (~*~): The horizontal resolution in dots per inch (DPI) for
   which the font is designed. An asterisk (~*~) means any value is acceptable.
10. Resolution Y (~*~): The vertical resolution in DPI. Similarly, an asterisk
    indicates any value.
11. Spacing (~p~): The character spacing (e.g., ~m~ for monospace, ~p~ for
    proportional). Here, ~p~ indicates proportional, but given the context
    (~mono~ appearing earlier), there might be a mix-up or a custom notation.
12. Average Width (~*~): The average character width, in tenths of a pixel. An
    asterisk indicates it's not specified.
13. Charset Registry (~iso10646~): The registry or encoding of the character
    set.
14. Charset Encoding (~1~): The specific encoding from the registry.

It's worth noting that your string might have some inaccuracies or
unconventional usage (e.g., "mono" appears where we would expect a numeric
value for the pixel size, and the actual pixel size field seems to be missing),
which might be specific to how the font was configured or an attempt to use a
shorthand or custom string.

For setting fonts in Emacs, especially if you're not working directly with X
environments or if you prefer simplicity, you might find it easier to use the
font's name directly when possible. Here is an example with
=set-face-attribute=:

#+BEGIN_SRC emacs-lisp :results silent
(set-face-attribute 'default nil :family "DejaVuSansM Nerd Font" :height 80)
#+END_SRC

This approach is more straightforward and less prone to errors while still
allowing you to specify the font family and size. Here is a list of all the
possible settings:

+ :family - The font family (e.g., "DejaVu Sans").
+ :foundry - The font foundry name.
+ :width - The relative character width of the font (e.g., normal, condensed, expanded).
+ :height - The font size in tenths of a point (e.g., 120 for 12+point font).
+ :weight + The weight of the font (e.g., normal, bold).
+ :slant - The slant of the font (e.g., normal, italic, oblique).
+ :underline - Whether the text is underlined (t, nil, or a color).
+ :overline - Whether the text has an overline (t, nil, or a color).
+ :strike-through - Whether the text is struck through (t, nil).
+ :box - Draw a box around the text (t, nil, or a plist specifying the box appearance).
+ :inverse-video - Whether the text should be displayed in inverse video (t, nil).
+ :foreground - The text color (a color name as a string, e.g., "red").
+ :background - The background color (a color name as a string).
+ :stipple - A bitmap pattern to fill the background of the face.
+ :inherit - Inherit attributes from another face.
